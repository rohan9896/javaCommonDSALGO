import java.util.*;
import java.io.*;

public class Main {
  
  // T.C.- O(nLogn)
  
  // in place algo
  // uses extra space only for recursive calls
  
  // assumes the last elemnt as pivot and
  // places pivot to is correct position
  
  // it will go like--
  // [[smaller than pivot elemnts], pivot, [greater than pivot elemnts]] 
  // then sort both the sub arrays using resursive leap of faith
  // ...and BOOM array is sorted ;-))
  
  
  // this func will return the index at which pivot has to be inserted
  static int partition(int[] a,int low,int high){
    int n = a.length;
    
    int pivot = a[high];
    int i=low-1;
    
    for(int j=low;j<=high-1;j++){ // loop will be called from 0th to one less than pivot
      if(a[j]<=pivot){
        i++; // incremnt the region whre smaller elemts(less than pivot) are placed
        //swap(a[i],a[j])
        // it will add all elemnts smaller than pivot to smaller region
        // and greater will remain kept where they are
        // as they doesnt come inside the if block
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
      }
    }
    
    // swap(a[high](which contaibs the pivot elemnt),a[i+1])
    //  a[i+1] is the next position of the last ele of 
    // subaaray which contains elemnts smaller than pivot
    // it will make sure that pivot is at the position
    int temp = a[i+1];
    a[i+1] = a[high];
    a[high] = temp;
    
    return (i+1); // point(or index) at which partion will happen
  }
  
  
  static void quickSort(int[] arr,int low,int high){
    
    if(low<high){
      // pi is partion index, Now arr[pi] is at right place
      int pi = partition(arr,low,high);
      
      quickSort(arr,low,pi-1);
      quickSort(arr,pi+1,high);
    }
  }
  
  
  
  public static void main(String args[]) throws IOException {
    
    //write your code here
    int[] arr = {6,9,1,5,4};
    int n = arr.length;
    
    quickSort(arr,0,n-1);
    for(int i: arr)
      System.out.print(i+" ");
  }
}
